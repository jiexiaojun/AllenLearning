package allen._91_99;

public class Test92 {

	public Test92() {
		// TODO Auto-generated constructor stub
	}

	/**              
	 * 方法描述：PC端— java 正则 判断非负 浮点数
	 * 创建人：汪俊    
	 * 创建时间：2017-4-10 上午08:24:55    
	 * 修改人：汪俊     
	 * 修改时间：2017-4-10 上午08:24:55   
	 * 修改备注：    
	 * @version V1.0       
	 */
	
	
	/*^表示以...开头，\d表示0-9的数字，$表示以...结尾
	匹配特定数字：
	^[1-9]\d*$　 　                                   //匹配正整数 不包括0
	^-[1-9]\d*$ 　                                    //匹配负整数 不包括0
	^-?[1-9]\d*$　　                                  //匹配整数   不包括0
	^-?[1-9]\d*|0$　　                                //匹配整数   + 0
	^[1-9]\d*|0$　                                    //匹配正整数 + 0
	^-[1-9]\d*|0$　　                                 //匹配负整数 + 0
	^[1-9]\d*\.\d*[0-9]\d*|0\.\d*[1-9]\d*$　　 		  //匹配正浮点数  不包括0.0+ 
	^[1-9]\d*\.\d*[0-9]\d*|0\.\d*[1-9]\d*|0$　　 	  //匹配正浮点数  +0
	^-([1-9]\d*\.\d*[0-9]\d*|0\.\d*[1-9]\d*)$　       //匹配负浮点数  不包括0.0+ 
	^-([1-9]\d*\.\d*[0-9]\d*|0\.\d*[1-9]\d*)|0$　     //匹配负浮点数  +0 
	^-?([1-9]\d*\.\d*[0-9]\d*|0\.\d*[1-9]\d*)$　      //匹配浮点数    不包括0 不包括0.0+
	^-?([1-9]\d*\.\d*[0-9]\d*|0\.\d*[0-9]\d*|0)$　    //匹配浮点数    +0 +0.0+
	^[1-9]\d*\.\d*[0-9]\d*|0\.\d*[1-9]\d*|[1-9]\d*$   //匹配正整数 + 正浮点数  不包括0  不包括0.0+
	评注：处理大量数据时有用，具体应用时注意修正
	匹配特定字符串：
	^[A-Za-z]+$　　  //匹配由26个英文字母组成的字符串
	^[A-Z]+$　　     //匹配由26个英文字母的大写组成的字符串
	^[a-z]+$　　     //匹配由26个英文字母的小写组成的字符串
	^[A-Za-z0-9]+$　 //匹配由数字和26个英文字母组成的字符串
	^\w+$　　        //匹配由数字、26个英文字母或者下划线组成的字符串*/	
	
	public static void main(String[] args) {
		String str = "1.5";  
		//^[1-9]\d*\.\d*[0-9]\d*|0\.\d*[1-9]\d*|[1-9]\d*$
		
		String regex = "^[1-9]\\d*\\.\\d*[0-9]\\d*|0\\.\\d*[1-9]\\d*|[1-9]\\d*$";  

		System.out.println(str.matches(regex));
		
		
	}
	
	
}
